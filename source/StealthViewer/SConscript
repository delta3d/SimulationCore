# Build script for actual level editor application.
import glob
import sys
import re
import os
import string

# Import the variables defined in the global SConstruct build script.
Import ('*')

if env['ENV'].has_key('QTDIR')  :
	
   # Environment settings for Qt
   qtdir = env['QTDIR']

   if env['OS'] != 'darwin':
      env.Append(CPPPATH = [qtdir + '/include'] )

   # Building the 3D view game library.
   StealthGMAppSrc = env.SGlob('GMApp/*.cpp')

   StealthGMAppDeps = ['dtActors', 'dtCore', 'dtABC', 'dtUtil', 'dtDAL', 'dtGame', 'dtHLAGM', 
	'SimViewerCore', 'dtGUI'] + env['rtiLibs']

   StealthGMAppDefines = []
   if env['OS'] == 'windows':
      StealthGMAppDefines = ['STEALTH_GAME_LIBRARY']
      if env.get('ageia') != 0 :
         StealthGMAppDefines += ['AGEIA_PHYSICS']
   
   StealthGMAppLibName = 'StealthGMApp'

   StealthGMAppLibTarget = env.BuildLib(StealthGMAppLibName, StealthGMAppSrc, StealthGMAppDeps, StealthGMAppDefines, prefixHeader='include/prefix/SimCorePrefix.h')

   # The function returns a list of header files that contain the Q_OBJECT macro.  These
   # are then passed on the the moc builder.
   def getQObjectHeaders(headers) :
      passed = []
      pattern = re.compile("Q_OBJECT")

      #windows has issues with file paths, and since the headers are based
      # on the build path, we need to adjust.
      path = string.replace(GetBuildPath('SConscript'),  'SConscript', '')
   
      headersFixed = []
      for i in headers:
         headersFixed.append(path + i) 

      for header in headersFixed:
         f = open(header)
         while 1 :
            l = f.readline()
            if not l :
               break
            if re.search(pattern,l):
               passed.append(header)
               break   
         f.close()
   
      return passed   
   
   env['QT_AUTOSCAN'] = 0
   env['QT_LIB'] = ''
   env['CXXFILESUFFIX'] = '.cpp'
   cppDefines = ['QT_THREAD_SUPPORT',
                   'QT_CORE_LIB',
                   'QT_GUI_LIB',
                   'QT_SHARED']
   
   if env['OS'] == 'linux' or env['OS'] == 'darwin':
      cppDefines += ['_REENTRANT']
      
   libs = ['QtCore','QtGui','QtOpenGL','AGL', 'opengl', 'dtActors', 'dtDAL','dtGUI', 'dtAI','dtCore','dtUtil','dtAudio','dtABC','dtGame','plibul','dtHLAGM','SimViewerCore'] + env['rtiLibs']

   uic_files = env.SGlob('ui/*.ui')
   uic_targets = []
   for uiFile in uic_files :
      if env['OS'] == 'windows':
         parts = uiFile.split("\\")
      else:
         parts = uiFile.split("/")
      
      #chop off the .ui   
      target = parts[len(parts)-1][:-3]
      #print target
      #print uiFile
      uic_targets.append(env.Uic4(target="../../include/StealthViewer/Qt/" + target, source=uiFile))
   
   # First, glob the header directory to obtain a list of potential files to run
   # the moc builder on.
   moc_headers = env.SGlob('../../include/StealthViewer/Qt/*.h')

   # Next, grep each header file for the Q_OBJECT macro to determine if moc should be run on 
   # it.
   moc_headers = getQObjectHeaders(moc_headers)
   
   # We want the resulting moc files put in a moc subdirectory under the StealthQt source
   # directory so we need to modify the pathnames of the sources to create the target output
   # file names.
   moc_targets = []
   for currHeader in moc_headers :
      if env['OS'] == 'windows':
         parts = currHeader.split("\\")
      else:
         parts = currHeader.split("/")
         
      target = parts[len(parts)-1][:-2]
         
      env['QT4_MOCFROMHFLAGS'] =['-Iapps/StealthViewer/include']
      moc_targets.append(env.Moc4(target=target, source=currHeader))

   initialSources = env.SGlob('Qt/*.cpp')

   if "precomp.cpp" in initialSources:
      initialSources.remove("precomp.cpp")

   libSources = initialSources + moc_targets #+ uic_targets

   # Build the icon
   if env['OS'] == 'windows' and env.has_key('MSVS') :
      if env['MSVS']['VERSION'] < 8.0 :
         libSources += env.RES( '#apps\StealthViewer\StealthQt.rc' )

   staticLib = env.BuildLib('StealthQt', libSources, [], extraDefines = cppDefines, prefixHeader = 'include/prefix/StealthQtPrefix.h', staticLib = True)
   app = env.BuildProgram('StealthQt', ['main.cpp'], libs + [ 'StealthQt', 'StealthGMApp' ], extraDefines = cppDefines, prefixHeader = 'include/prefix/StealthQtPrefix.h')

   result = True      
   if (app == '[]') :
      result = 'false'
   else :
      result = 'true'
   
   if (result == 'false') :
      errorLog.write("Failed to build the Stealth Viewer Application.\n")
   
   Return('result')
